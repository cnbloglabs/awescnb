!function(r, o) {
    "use strict";
    let e, i = "hljs-ln", l = "hljs-ln-line", h = "hljs-ln-code", s = "hljs-ln-numbers", c = "hljs-ln-n", m = "data-line-number", a = /\r\n|\r|\n/g;
    function u(e) {
        for (var n = e.toString(), t = e.anchorNode; t.nodeName !== "TD"; )
            {t = t.parentNode;}
        for (var r = e.focusNode; r.nodeName !== "TD"; )
            {r = r.parentNode;}
        let o = parseInt(t.dataset.lineNumber)
          , a = parseInt(r.dataset.lineNumber);
        if (o == a)
            {return n;}
        let i, l = t.textContent, s = r.textContent;
        for (a < o && (i = o,
        o = a,
        a = i,
        i = l,
        l = s,
        s = i); n.indexOf(l) !== 0; )
            {l = l.slice(1);}
        for (; n.lastIndexOf(s) === -1; )
            {s = s.slice(0, -1);}
        for (var c = l, u = function(e) {
            for (var n = e; n.nodeName !== "TABLE"; )
                {n = n.parentNode;}
            return n
        }(t), d = o + 1; d < a; ++d) {
            const f = p('.{0}[{1}="{2}"]', [h, m, d]);
            c += `\n${  u.querySelector(f).textContent}`
        }
        return c += `\n${  s}`
    }
    function n(e) {
        try {
            const n = o.querySelectorAll("code.hljs,code.nohighlight");
            for (const t in n)
                {n.hasOwnProperty(t) && (n[t].classList.contains("nohljsln") || d(n[t], e))}
        } catch (e) {
            r.console.error("LineNumbers error: ", e)
        }
    }
    function d(e, n) {
        typeof e === "object" && r.setTimeout(function() {
            e.innerHTML = f(e, n)
        }, 0)
    }
    function f(e, n) {
        let t, r, o = (t = e,
        {
            singleLine: function(e) {
                return Boolean(e.singleLine) && e.singleLine
            }(r = (r = n) || {}),
            startFrom: function(e, n) {
                let t = 1;
                isFinite(n.startFrom) && (t = n.startFrom);
                const r = function(e, n) {
                    return e.hasAttribute(n) ? e.getAttribute(n) : null
                }(e, "data-ln-start-from");
                return r !== null && (t = function(e, n) {
                    if (!e)
                        {return n;}
                    const t = Number(e);
                    return isFinite(t) ? t : n
                }(r, 1)),
                t
            }(t, r)
        });
        return function e(n) {
            const t = n.childNodes;
            for (const r in t) {
                var o;
                t.hasOwnProperty(r) && (o = t[r],
                (o.textContent.trim().match(a) || []).length > 0 && (o.childNodes.length > 0 ? e(o) : v(o.parentNode)))
            }
        }(e),
        function(e, n) {
            const t = g(e);
            t[t.length - 1].trim() === "" && t.pop();
            if (t.length > 1 || n.singleLine) {
                for (var r = "", o = 0, a = t.length; o < a; o++)
                    {r += p('<tr><td class="{0} {1}" {3}="{5}"><div class="{2}" {3}="{5}"></div></td><td class="{0} {4}" {3}="{5}">{6}</td></tr>', [l, s, c, m, h, o + n.startFrom, t[o].length > 0 ? t[o] : " "]);}
                return p('<table class="{0}">{1}</table>', [i, r])
            }
            return e
        }(e.innerHTML, o)
    }
    function v(e) {
        const n = e.className;
        if (/hljs-/.test(n)) {
            for (var t = g(e.innerHTML), r = 0, o = ""; r < t.length; r++) {
                o += p('<span class="{0}">{1}</span>\n', [n, t[r].length > 0 ? t[r] : " "])
            }
            e.innerHTML = o.trim()
        }
    }
    function g(e) {
        return e.length === 0 ? [] : e.split(a)
    }
    function p(e, t) {
        return e.replace(/\{(\d+)\}/g, function(e, n) {
            return void 0 !== t[n] ? t[n] : e
        })
    }
    r.hljs ? (r.hljs.initLineNumbersOnLoad = function(e) {
        o.readyState === "interactive" || o.readyState === "complete" ? n(e) : r.addEventListener("DOMContentLoaded", function() {
            n(e)
        })
    }
    ,
    r.hljs.lineNumbersBlock = d,
    r.hljs.lineNumbersValue = function(e, n) {
        if (typeof e !== "string")
            {return;}
        const t = document.createElement("code");
        return t.innerHTML = e,
        f(t, n)
    }
    ,
    (e = o.createElement("style")).type = "text/css",
    e.innerHTML = p(".{0}{border-collapse:collapse}.{0} td{padding:0}.{1}:before{content:attr({2})}", [i, c, m]),
    o.getElementsByTagName("head")[0].appendChild(e)) : r.console.error("highlight.js not detected!"),
    document.addEventListener("copy", function(e) {
        let n, t = window.getSelection();
        !function(e) {
            for (let n = e; n; ) {
                if (n.className && n.className.indexOf("hljs-ln-code") !== -1)
                    {return 1;}
                n = n.parentNode
            }
        }(t.anchorNode) || (n = window.navigator.userAgent.indexOf("Edge") !== -1 ? u(t) : t.toString(),
        e.clipboardData.setData("text/plain", n),
        e.preventDefault())
    })
}(window, document);
